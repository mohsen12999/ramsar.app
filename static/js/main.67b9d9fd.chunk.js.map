{"version":3,"sources":["shares/URLs.ts","shares/Constants.ts","pages/Home.tsx","pages/Category.tsx","pages/Facility.tsx","pages/Search.tsx","pages/About.tsx","pages/Faq.tsx","pages/Notfound.tsx","App.tsx","shares/LocalStorages.ts","store/Data.ts","store/index.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","store/configureStore.ts"],"names":["Pages","Status","Home","Category","Facility","Search","About","Faq","Notfound","App","exact","path","HomePage","component","DataActions","Data","reducers","data","state","incomingAction","undefined","status","INIT","categories","facilities","action","type","DATA_REQUEST","cachedDate","JSON","parse","localStorage","getItem","LOADING","DATA_FAILURE","FAILED","DATA_SUCCESS","payload","currentState","SUCCEEDED","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","history","createBrowserHistory","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","applyMiddleware","configureStore","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.67b9d9fd.chunk.js","sourcesContent":["export const DATA_URL = \"/api/public\";\r\n\r\nexport enum Pages {\r\n  HomePage = \"/\",\r\n  Faq = \"/faq\",\r\n  Category = \"/category/\",\r\n  Facility = \"/facility/\",\r\n  Search = \"/search/\",\r\n  About = \"/about\",\r\n  Notfound = \"/notfound\",\r\n}\r\n","export enum Status {\r\n  INIT = \"INIT\",\r\n  IDLE = \"IDLE\",\r\n  LOADING = \"LOADING\",\r\n  SUCCEEDED = \"SUCCEEDED\",\r\n  FAILED = \"FAILED\",\r\n}\r\n","import React from \"react\";\r\n\r\nconst Home = () => <div>Home</div>;\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Category = () => <div>Category</div>;\r\n\r\nexport default Category;\r\n","import React from \"react\";\r\n\r\nconst Facility = () => <div>Facility</div>;\r\n\r\nexport default Facility;\r\n","import React from \"react\";\r\n\r\nconst Search = () => <div>Search</div>;\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst About = () => <div>About</div>;\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nconst Faq = () => <div>Faq</div>;\r\n\r\nexport default Faq;\r\n","import React from \"react\";\r\n\r\nconst Notfound = () => <div>Notfound</div>;\r\n\r\nexport default Notfound;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { Pages } from \"./shares/URLs\";\n\nimport Home from \"./pages/Home\";\nimport Category from \"./pages/Category\";\nimport Facility from \"./pages/Facility\";\nimport Search from \"./pages/Search\";\nimport About from \"./pages/About\";\nimport Faq from \"./pages/Faq\";\nimport Notfound from \"./pages/Notfound\";\n\nconst App = () => (\n  <Switch>\n    <Route exact path={Pages.HomePage} component={Home} />\n    <Route exact path={Pages.Category + \":id\"} component={Category} />\n    <Route exact path={Pages.Facility + \":id\"} component={Facility} />\n    <Route exact path={Pages.Search + \":text\"} component={Search} />\n    <Route exact path={Pages.About} component={About} />\n    <Route exact path={Pages.Faq} component={Faq} />\n    <Route component={Notfound} />\n  </Switch>\n);\n\nexport default App;\n","import { IDataState } from \"../store/Data\";\r\n\r\nconst Data = \"Data\";\r\n\r\nexport const SaveDataToLocalStorage = (data: IDataState) => {\r\n  localStorage.setItem(Data, JSON.stringify(data));\r\n};\r\n\r\nexport const GetDataFromLocalStorage = (): IDataState => {\r\n  return JSON.parse(localStorage.getItem(Data) as string);\r\n};\r\n","import axios from \"axios\";\r\nimport { Action, Reducer } from \"redux\";\r\nimport { Status } from \"../shares/Constants\";\r\nimport { ICategory, IFacility } from \"../shares/Interfaces\";\r\nimport { GetDataFromLocalStorage } from \"../shares/LocalStorages\";\r\nimport { DATA_URL } from \"../shares/URLs\";\r\nimport { AppThunkAction } from \"./\";\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface IDataState {\r\n  status: Status;\r\n\r\n  categories: ICategory[];\r\n  facilities: IFacility[];\r\n}\r\n\r\nexport enum DataActions {\r\n  DATA_REQUEST = \"DATA_REQUEST\",\r\n  DATA_SUCCESS = \"DATA_SUCCESS \",\r\n  DATA_FAILURE = \"DATA_FAILURE \",\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\r\n\r\nexport interface ILoadData {\r\n  type: DataActions;\r\n  payload?: { message?: string; data?: any; error?: any };\r\n}\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\nexport type KnownAction = ILoadData;\r\n\r\nexport const actionCreators = {\r\n  loadData: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n    if (getState().data?.status === Status.LOADING) {\r\n      dispatch({\r\n        type: DataActions.DATA_FAILURE,\r\n        payload: { message: \"we are in loading!\" },\r\n      });\r\n      return false;\r\n    }\r\n\r\n    dispatch({ type: DataActions.DATA_REQUEST } as ILoadData);\r\n\r\n    try {\r\n      axios.get(DATA_URL).then((response) => {\r\n        if (response && response.data && response.data.success) {\r\n          dispatch({\r\n            type: DataActions.DATA_SUCCESS,\r\n            payload: {\r\n              message: \"axios success get data\",\r\n              data: response.data,\r\n            },\r\n          });\r\n          return true;\r\n        } else {\r\n          dispatch({\r\n            type: DataActions.DATA_FAILURE,\r\n            payload: { message: \"axios not success\", error: response },\r\n          });\r\n          return false;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: DataActions.DATA_FAILURE,\r\n        payload: { message: \"axios catch error\", error: error },\r\n      });\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\nexport const reducer: Reducer<IDataState> = (\r\n  state: IDataState | undefined,\r\n  incomingAction: Action\r\n): IDataState => {\r\n  if (state === undefined) {\r\n    return {\r\n      status: Status.INIT,\r\n      categories: [],\r\n      facilities: [],\r\n    };\r\n  }\r\n\r\n  const action = incomingAction as KnownAction;\r\n\r\n  switch (action.type) {\r\n    case DataActions.DATA_REQUEST:\r\n      const cachedDate = GetDataFromLocalStorage();\r\n      return cachedDate\r\n        ? { ...cachedDate, status: Status.LOADING }\r\n        : { ...state, status: Status.LOADING };\r\n\r\n    case DataActions.DATA_FAILURE:\r\n      return { ...state, status: Status.FAILED };\r\n\r\n    case DataActions.DATA_SUCCESS:\r\n      if (action.payload && action.payload.data) {\r\n        const data = action.payload.data;\r\n        const currentState = { ...state };\r\n        if (data.categories) {\r\n          currentState.categories = data.categories;\r\n        }\r\n        if (data.facilities) {\r\n          currentState.facilities = data.facilities;\r\n        }\r\n        return { ...currentState, status: Status.SUCCEEDED };\r\n      }\r\n      return { ...state, status: Status.SUCCEEDED };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as Data from \"./Data\";\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n  data: Data.IDataState | undefined;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n  data: Data.reducer,\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n  (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { createBrowserHistory } from \"history\";\nimport configureStore from \"./store/configureStore\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst history = createBrowserHistory();\n\n// Get the application-wide store instance, prepopulating with state from the server where available.\nconst store = configureStore(history);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\r\nimport { History } from \"history\";\r\nimport { ApplicationState, reducers } from \"./\";\r\n\r\nexport default function configureStore(\r\n  history: History,\r\n  initialState?: ApplicationState\r\n) {\r\n  const middleware = [thunk, routerMiddleware(history)];\r\n\r\n  const rootReducer = combineReducers({\r\n    ...reducers,\r\n    router: connectRouter(history),\r\n  });\r\n\r\n  const enhancers = [];\r\n  const windowIfDefined =\r\n    typeof window === \"undefined\" ? null : (window as any); // eslint-disable-line @typescript-eslint/no-explicit-any\r\n  if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n    enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n  }\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware), ...enhancers)\r\n  );\r\n}\r\n"],"sourceRoot":""}